name: test

on: [push, pull_request]

env:
  CMAKE_FLAGS: -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror"

jobs:

  ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt install liblua5.4-dev lua5.4

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build ${{env.CMAKE_FLAGS}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest

    - name: Install
      run: sudo cmake --install ${{github.workspace}}/build

    - name: Build C Example
      working-directory: ${{github.workspace}}/examples/c
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build

    - name: Build C++ Example
      working-directory: ${{github.workspace}}/examples/cpp
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build

    - name: Build and Run C++ Log Writer Example
      working-directory: ${{github.workspace}}/examples/cpp/lcm_log_writer
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build
        LD_LIBRARY_PATH=/usr/local/lib/ build/lcm_log_writer build/example.log

  macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        brew install lua

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build ${{env.CMAKE_FLAGS}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest

    - name: Install
      run: sudo cmake --install ${{github.workspace}}/build

    - name: Build C Example
      working-directory: ${{github.workspace}}/examples/c
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build

    - name: Build C++ Example
      working-directory: ${{github.workspace}}/examples/cpp
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build

    - name: Build and Run C++ Log Writer Example
      working-directory: ${{github.workspace}}/examples/cpp/lcm_log_writer
      run: |
        cmake -B build ${{env.CMAKE_FLAGS}}
        cmake --build build
        build/lcm_log_writer build/example.log

  windows:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v3
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: false
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          glib2:p
          gtest:p
  
    - name: Configure CMake
      run: cmake -B build

    - name: Build
      run: cmake --build build

    # Needs to be installed for the tests to be able to find DLLs.
    - name: Install
      run: cmake --install build --prefix /mingw64/

    - name: Test
      run: |
        cd build
        # Copy DLLs that don't get installed into the directories of the tests that need them.
        cp test/types/liblcm-test-types.dll test/c/
        ctest

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt install doxygen liblua5.4-dev lua5.4
          pip install sphinx-rtd-theme Sphinx myst-parser

      - name: Build Docs
        run: |
          cmake -B ${{github.workspace}}/build
          cd build
          make doc

      - name: Archive Docs
        uses: actions/upload-artifact@v3
        with:
          name: archived-docs
          path: build/docs/_build

  formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt install clang-format-12

      - name: Check formatting
        run: |
          ./format_code.sh --check
